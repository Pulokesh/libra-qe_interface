#!/bin/csh
#
#  last update = 17 May 2013
#
#  This is a C-shell script to execute GAMESS, by typing
#       rungms JOB VERNO NCPUS >& JOB.log &
#  JOB    is the name of the 'JOB.inp' file to be executed,
#  VERNO  is the number of the executable you chose at 'lked' time,
#  NCPUS  is the number of processors to be used.
#
#
set TARGET=mpi
set SCR=$SLURMTMPDIR
set USERSCR=$SLURM_SUBMIT_DIR
set GMSPATH=/util/gamess/v20130501r1/impi/gamess
#
set JOB=$1      # name of the input file xxx.inp, give only the xxx part
set VERNO=$2    # revision number of the executable created by 'lked' step
set NCPUS=$3    # number of compute processes to be run
#
# provide defaults if last two arguments are not given to this script
if (null$VERNO == null) set VERNO=00
if (null$NCPUS == null) set NCPUS=1
#
#  ---- the top third of the script is input and other file assignments ----
#
echo "----- GAMESS execution script 'rungms' -----"
set master=`hostname`
echo This job is running on host $master
echo under operating system `uname` at `date`
#
#
echo "Available scratch disk space (Kbyte units) at beginning of the job is"
df -k $SCR
echo "GAMESS temporary binary files will be written to $SCR"
echo "GAMESS supplementary output files will be written to $USERSCR"

#        this added as experiment, February 2007
#        its intent is to detect large arrays allocated off the stack
limit stacksize 8192

#  Grab a copy of the input file.
#  In the case of examNN jobs, file is in tests/standard subdirectory.
#  In the case of exam-vbNN jobs, file is in vb2000's tests subdirectory.
if ($JOB:r.inp == $JOB) set JOB=$JOB:r      # strip off possible .inp
echo "Copying input file $JOB.inp to your run's scratch directory..."
if (-e $JOB.inp) then
   set echo
   sbcast $JOB.inp $SCR/$JOB.F05
else
         echo "Input file $JOB.inp does not exist."
         echo "This job expected the input file to be in directory `pwd`"
         echo "Please fix your file name problem, and resubmit."
         exit 4
endif

#    define many environment variables setting up file names.
#    anything can be overridden by a user's own choice, read 2nd.
source $GMSPATH/gms-files.csh
if (-e $HOME/.gmsrc) then
   echo "reading your own $HOME/.gmsrc"
   source $HOME/.gmsrc
endif
#

#    data left over from a previous run might be precious, stop if found.
if ((-e $PUNCH) || (-e $MAKEFP) || (-e $TRAJECT) || (-e $RESTART) ) then
   echo "Please save, rename, or erase these files from a previous run:"
   echo "     $PUNCH,"
   echo "     $TRAJECT,"
   echo "     $RESTART, and/or"
   echo "     $MAKEFP,"
   echo "and then resubmit this computation."
   exit 4
endif

#  ---- the middle third of the script is to execute GAMESS ----
#                     - a typical MPI example -
#
set PPN=2
   #
   #      Allow for compute process and data servers (one pair per core)
   #      note that NCPUS = #cores, and NPROCS = #MPI processes
   #
@ NPROCS = $NCPUS + $NCPUS
   #
   #      User customization required here:
   #         specify your MPI choice: impi/mvapich2
   #         specify your MPI library's top level path just below,
   #         this will have directories like include/lib/bin below it.
   #
   #
      setenv LD_LIBRARY_PATH /util/intel/impi/4.1.1.036/intel64/lib
      set path=(/util/intel/impi/4.1.1.036/intel64/bin $path)
      setenv I_MPI_WAIT_MODE enable
      setenv I_MPI_DEBUG 4
      setenv I_MPI_PMI_LIBRARY /usr/lib64/libpmi.so
   #   setenv I_MPI_PIN disable
   #   setenv I_MPI_DEBUG 0
   #   setenv I_MPI_STATS 0
   echo "MPI kickoff will run GAMESS on $NCPUS cores in $SLURM_NNODES nodes."
   echo "The nodes are $SLURM_JOB_NODELIST."
   echo "The binary to be executed is $GMSPATH/gamess.$VERNO.x"
   echo "MPI will run $NCPUS compute processes and $NCPUS data servers,"
   echo "    placing $PPN of each process type onto each node."
   echo "The scratch disk space on each node is $SCR, with free space"
   df -k $SCR
   #
   chdir $SCR
   #
#srun --overcommit --cpu_bind=none --ntasks-per-core=2 --ntasks=$NPROCS $GMSPATH/gamess.$VERNO.x < /dev/null
srun --overcommit --ntasks-per-core=2 --ntasks=$NPROCS $GMSPATH/gamess.$VERNO.x < /dev/null
exit
